<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Safe Vault Interface</title>
    <style>
        body { font-family: Arial, sans-serif; max-width: 800px; margin: 0 auto; padding: 20px; }
        .section { border: 1px solid #ddd; padding: 20px; margin: 20px 0; border-radius: 8px; }
        input[type="number"] { padding: 8px; margin: 5px; width: 200px; }
        button { background-color: #4CAF50; color: white; padding: 10px; border: none; border-radius: 4px; cursor: pointer; }
        .status { margin-top: 20px; padding: 10px; background-color: #f0f0f0; border-radius: 4px; }
        .error { background-color: #ffebee; color: #b71c1c; }
        .success { background-color: #e8f5e9; color: #2e7d32; }
        .processing { background-color: #fff3e0; color: #ef6c00; }
    </style>
</head>
<body>
    <h1>Safe Vault Interface</h1>

    <div class="section">
        <h2>Wallet Connection</h2>
        <button onclick="connectWallet()">Connect Wallet</button>
        <p id="walletStatus">Not connected</p>
    </div>

    <div class="section">
        <h2>Lock Tokens</h2>
        <form onsubmit="lockTokens(event)">
            <input type="number" id="amount" placeholder="Amount" step="0.1" required>
            <input type="number" id="duration" placeholder="Duration (days)" required>
            <button type="submit">Lock Tokens</button>
        </form>
    </div>

    <div class="section">
        <h2>Vault Status</h2>
        <div id="vaultDetails">
            <p>Loading...</p>
        </div>
    </div>

    <div class="status" id="statusMessage"></div>

    <script src="https://cdn.ethers.io/lib/ethers-5.2.umd.min.js"></script>
    <script>
        let provider, signer, contract, currentAccount;
        const contractAddress = "0x..."; // Replace with your contract address
        const contractABI = [ /* Paste your contract ABI here */ ];
        const BNB_CHAIN_ID = "0x38"; // BSC Mainnet chain ID

        // Initialize when page loads
        window.addEventListener('load', async () => {
            if (typeof window.ethereum !== 'undefined' && window.ethereum.isMetaMask) {
                try {
                    provider = new ethers.providers.Web3Provider(window.ethereum);
                    
                    // Check if already connected
                    const accounts = await provider.listAccounts();
                    if (accounts.length > 0) {
                        currentAccount = accounts[0];
                        initializeContract();
                    }
                } catch (error) {
                    showStatus(`Initialization error: ${error.message}`, 'error');
                }
            }
        });

        async function connectWallet() {
            try {
                if (!window.ethereum) {
                    showStatus('MetaMask extension not detected!', 'error');
                    return;
                }

                if (!window.ethereum.isMetaMask) {
                    showStatus('Please use MetaMask wallet!', 'error');
                    return;
                }

                // Check network
                const chainId = await window.ethereum.request({ method: 'eth_chainId' });
                if (chainId !== BNB_CHAIN_ID) {
                    await switchToBnbChain();
                }

                provider = new ethers.providers.Web3Provider(window.ethereum);
                await provider.send("eth_requestAccounts", []);
                signer = provider.getSigner();
                currentAccount = await signer.getAddress();
                
                document.getElementById('walletStatus').textContent = 
                    `Connected: ${currentAccount.slice(0, 6)}...${currentAccount.slice(-4)}`;
                
                initializeContract();
                updateVaultDetails();

            } catch (error) {
                handleConnectionError(error);
            }
        }

        async function switchToBnbChain() {
            try {
                await window.ethereum.request({
                    method: 'wallet_switchEthereumChain',
                    params: [{ chainId: BNB_CHAIN_ID }],
                });
            } catch (error) {
                if (error.code === 4902) {
                    showStatus('Please add BNB Smart Chain to MetaMask!', 'error');
                }
                throw error;
            }
        }

        function initializeContract() {
            contract = new ethers.Contract(contractAddress, contractABI, signer);
        }

        async function lockTokens(event) {
            event.preventDefault();
            try {
                const amount = document.getElementById('amount').value;
                const durationDays = document.getElementById('duration').value;
                
                if (!amount || amount <= 0 || !durationDays || durationDays <= 0) {
                    showStatus('Invalid input values!', 'error');
                    return;
                }

                const amountWei = ethers.utils.parseUnits(amount, 18);
                const durationSeconds = durationDays * 86400;
                
                const tx = await contract.lockTokens(amountWei, durationSeconds);
                showStatus('Processing transaction...', 'processing');
                
                await tx.wait();
                showStatus('Tokens locked successfully!', 'success');
                updateVaultDetails();
                
            } catch (error) {
                showStatus(`Transaction failed: ${error.message}`, 'error');
            }
        }

        async function updateVaultDetails() {
            try {
                const lock = await contract.getLockDetails(currentAccount);
                const rewards = await contract.calculateReward(currentAccount);
                
                const detailsDiv = document.getElementById('vaultDetails');
                if (lock.amount > 0) {
                    detailsDiv.innerHTML = `
                        <p>Locked Amount: ${ethers.utils.formatUnits(lock.amount, 18)}</p>
                        <p>Lock Duration: ${lock.duration / 86400} days</p>
                        <p>Rewards: ${ethers.utils.formatUnits(rewards, 18)}</p>
                        <p>Unlock Time: ${new Date(lock.startTime * 1000 + lock.duration * 1000).toLocaleString()}</p>
                    `;
                } else {
                    detailsDiv.innerHTML = '<p>No active locks</p>';
                }
            } catch (error) {
                console.error('Vault details error:', error);
            }
        }

        function handleConnectionError(error) {
            if (error.code === 4001) {
                showStatus('User denied connection request!', 'error');
            } else {
                showStatus(`Connection error: ${error.message}`, 'error');
            }
        }

        function showStatus(message, type) {
            const statusDiv = document.getElementById('statusMessage');
            statusDiv.textContent = message;
            statusDiv.className = `status ${type}`;
        }
    </script>
</body>
</html>
